from django.core.files.storage import default_storagefrom rest_framework import status, viewsetsfrom rest_framework.permissions import IsAuthenticatedfrom rest_framework.response import Responsefrom django_storage_test.videos.models import Videofrom .serializers import VideoSerializerfrom .tasks import upload_videoclass VideoViewSet(viewsets.ModelViewSet):    permission_classes = (IsAuthenticated,)    queryset = Video.objects.all()    serializer_class = VideoSerializer    def get_queryset(self):        return self.queryset.filter(user=self.request.user)    def create(self, request, *args, **kwargs):        file = request.FILES["video"]        # generate pre-signed URL for uploading the file        url = default_storage.url(file.name)        # create the Video object and save it to the database        serializer = self.get_serializer(data=request.data)        serializer.is_valid(raise_exception=True)        self.perform_create(serializer)        headers = self.get_success_headers(serializer.data)        # video = self.get_object()        # start the async celery task to handle the file upload        upload_video.apply_async((url, file))        return Response(            serializer.data, status=status.HTTP_201_CREATED, headers=headers        )def list(self, request, *args, **kwargs):    queryset = self.filter_queryset(self.get_queryset())    serializer = VideoSerializer(queryset, many=True)    return Response(serializer.data)
